/*
 * input handler on DatabaseService level
 *
 * - remove virtual fields
 * - add managed, if not provided
 * - assert not nullable without default (for better error message)
 * - add default values, if not provided (mainly for rest response body, odata does read after write)
 * - add UUIDs
 * - propagate keys
 */

const getTemplate = require('../../common/utils/template')
const templateProcessor = require('../../common/utils/templateProcessor')
const generateUUID = require('../../common/utils/uuid')
const { foreignKeyPropagations, propagateForeignKeys } = require('../../common/utils/foreignKeyPropagations')
const enrichDataWithKeysFromWhere = require('../../common/utils/enrichWithKeysFromWhere')

const { DRAFT_COLUMNS_MAP } = require('../../common/constants/draft')

const _isManaged = (category, event) =>
  (category === '@cds.on.insert' && event === 'CREATE') || (category === '@cds.on.update' && event === 'UPDATE')

const _setManaged = (row, key, arg, req) => {
  switch (arg) {
    case '$user':
      row[key] = req.user.id
      break
    case '$now':
      row[key] = new Date(req.timestamp).toISOString()
      break
    default:
      row[key] = arg
  }
}

const processorFn = req => (row, key, element, plain) => {
  const { category, args } = plain
  const val = row[key]

  if (category === 'propagateForeignKeys') {
    propagateForeignKeys(key, row, args.foreignKeyPropagations)
  }

  // virtual
  if (category === 'virtual') {
    delete row[key]
    return
  }

  // managed
  if (val === undefined && _isManaged(category, req.event)) {
    _setManaged(row, key, args['='], req)
    return
  }

  // not null without default (for better error message)
  if (category === '!default' && val == null && req.event === 'CREATE') {
    req.error(400, `Value of element '${key}' is required`, key)
    return
  }

  // REVISIT: not null with default (for rest response body)
  if (category === 'default' && val === undefined && req.event === 'CREATE' && args.val) {
    row[key] = args.val
  }

  // generate UUIDs
  if (category === 'uuid' && !val && req.event === 'CREATE') {
    row[key] = generateUUID()
  }
}

const _pick = element => {
  if (element.virtual) {
    return { category: 'virtual' }
  }
  if (
    element.notNull &&
    element['@assert.notNull'] !== false &&
    !element.default &&
    element.type !== 'cds.Association'
  ) {
    return { category: '!default' }
  }
  if (element.default && !DRAFT_COLUMNS_MAP[element.name]) {
    return { category: 'default', args: element.default }
  }
  if (element['@cds.on.insert']) {
    return { category: '@cds.on.insert', args: element['@cds.on.insert'] }
  }
  if (element['@cds.on.update']) {
    return { category: '@cds.on.update', args: element['@cds.on.update'] }
  }

  const _foreignKeyPropagations = foreignKeyPropagations(element)
  if (_foreignKeyPropagations) {
    return { category: 'propagateForeignKeys', args: { foreignKeyPropagations: _foreignKeyPropagations } }
  }

  if (element.key && !DRAFT_COLUMNS_MAP[element.name]) {
    // generate uuid
    if (element.type === 'cds.UUID') {
      return { category: 'uuid' }
    }
  }
}

function _handler (req) {
  if (typeof req.query === 'string' || !req.target || req.target._unresolved) {
    return
  }

  // REVISIT: probably need to filter for .columns/.rows combination as well
  if (req.query.INSERT && !req.query.INSERT.entries) {
    return
  }

  const template = getTemplate('db-input', this, req.target, { pick: _pick })

  if (template.elements.size === 0) return

  enrichDataWithKeysFromWhere(req.data, req.query, req.target)

  const data = Array.isArray(req.data) ? req.data : [req.data]
  for (const row of data) {
    templateProcessor(processorFn(req), row, template)
  }
}

_handler._initial = true

module.exports = _handler
