const cds = global.cds || require('@sap/cds/lib')
const ODataRequest = require('../ODataRequest')

const {
  Components: { DATA_UPDATE_HANDLER }
} = require('@sap/odata-server')

const { DRAFT_COLUMNS } = require('../../../../common/constants/draft')

const { getSapMessages } = require('../../../../common/error/frontend')
const { toODataResult } = require('../utils/event')
const { validateResourcePath } = require('../utils/request')
const { removeContainmentKeys } = require('../utils/handlerUtils')
const { getDeepSelect } = require('../../../services/utils/handlerUtils')
const autoExpandIfNecessary = require('../utils/autoExpandToOne')
const { getEtagElement } = require('../utils/csn')

const _addETag = (odataReq, req, result) => {
  if (odataReq.getConcurrentResource() !== null) {
    const etagElement = getEtagElement(req.target)
    result['*@odata.etag'] = result[etagElement.name]
  }
}

const { COMMON, ODATA } = require('../../../../common/constants/annotation')

function _isDraftEntity (target) {
  return (
    target &&
    (target[ODATA.DRAFT] || target[COMMON.DRAFT_NODE.PREP_ACTION] || target.name.endsWith('.DraftAdministrativeData'))
  )
}

const _columnsForTestRead = target => {
  const columns = Object.keys(target.elements).filter(
    k =>
      target.elements[k].type !== 'cds.Association' &&
      target.elements[k].type !== 'cds.Composition' &&
      !target.elements[k].virtual &&
      !DRAFT_COLUMNS.includes(k) // > getDeepSelect() used in onCreate._getResult() does the same
  )

  return columns
}

const _readAfterWrite = async (service, req, tx) => {
  if (req.event === 'UPDATE') {
    return tx.run(cds.ql.SELECT.from(req.query.UPDATE.entity, _columnsForTestRead(req.target)))
  } else {
    // UPSERT
    return tx.run(getDeepSelect(req, service.model.definitions))
  }
}

const _isUpsertAllowed = target =>
  cds.db &&
  !(cds.env.runtime && cds.env.runtime.allow_upsert === false) &&
  target['@cds.persistence.skip'] !== true &&
  !_isDraftEntity(target)

const _rewriteIfNecessary = async (req, changeset, tx) => {
  if (_isUpsertAllowed(req.target)) {
    if (changeset) req.context = tx.context
    const dataInDb = await cds.tx(req).run(cds.ql.SELECT.from(req.query.UPDATE.entity, [1]))

    if (dataInDb.length === 0) {
      req.query = cds.ql.INSERT.into(req.target).entries(req.data)
      req.event = 'CREATE'
    }
  }
}

const _postProcess = (odataReq, req, result, service) => {
  _addETag(odataReq, req, result)
  autoExpandIfNecessary(req.target, result)
  removeContainmentKeys(service, req.target, result)
}

/**
 * The handler that will be registered with odata-v4.
 *
 * In case of success it calls next with the number of updated entries as result.
 * In case of error it calls next with error.
 *
 * @param {Service} service
 * @param {Object} options
 * @return {Function}
 */
const update = (service, options) => {
  return async (odataReq, odataRes, next) => {
    let req
    try {
      validateResourcePath(odataReq, options, service.model)
      req = new ODataRequest(DATA_UPDATE_HANDLER, service, odataReq, odataRes)
    } catch (e) {
      return next(e)
    }

    let tx
    const changeset = odataReq.getAtomicityGroupId()
    if (changeset) {
      tx = odataReq.getBatchApplicationData().txs[changeset]
    } else {
      cds.context = tx = service.tx(req, true)
    }

    let result, err, commit
    try {
      // rewrite req for UPSERT if needed
      // REVISIT: try UPDATE then CREATE
      // REVISIT: distinguish PUT and PATCH?
      await _rewriteIfNecessary(req, changeset, tx)

      result = await tx.emit(req)

      // REVISIT: find better solution
      if (req._.readAfterWrite) {
        const dataInDb = await _readAfterWrite(service, req, cds.tx(req))
        // REVISIT: may be a problem on direct update of property (which we don't support yet)
        result = dataInDb[0] || result
      }

      _postProcess(odataReq, req, result, service)

      if (!changeset) {
        commit = true
        await tx.commit(result)
      } else {
        // for passing into commit
        odataReq.getBatchApplicationData().results[changeset].push({ result, req })
      }
    } catch (e) {
      err = e
      if (!changeset && !commit) {
        // ignore rollback error, which should never happen
        await tx.rollback(e).catch(() => {})
      } else if (changeset) {
        // for passing into rollback
        odataReq.getBatchApplicationData().errors[changeset].push({ error: e, req })
      }
    } finally {
      req.messages && odataRes.setHeader('sap-messages', getSapMessages(req.messages, req._.req))

      if (err) next(err)
      else next(null, toODataResult(result))
    }
  }
}

module.exports = update
